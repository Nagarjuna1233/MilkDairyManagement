/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.milkdairy.users;

import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

import org.apache.log4j.Logger;

import com.milkdairy.admin.MilkDairyManagementJFrame;
import com.milkdairy.fileservice.MilkDairyPersistenceManager;
import com.milkdairy.managedobjects.User;
import com.milkdairy.services.MDMValidationUtil;

/**
 *
 * @author nagarjuna
 */
public class LoginJFrame extends javax.swing.JFrame {
	private static final Logger LOG = Logger.getLogger(LoginJFrame.class);
	private JPanel milkDairyManagementJPanel;
	private JFrame loginJF = this;
	private LoggingService loggingService;
	private JPanel signUpJP;
	private JPanel foregetJP;
	Container con;
	MilkDairyPersistenceManager milkDairyPersistenceManager;
	private boolean isSignUpDisplay = false;
	private boolean isForegetDisplay = false;

	private static final String EMPTY_ERROR_MG = "Can't be empty";

	/**
	 * Creates new form NewJFrame
	 */
	public LoginJFrame(JPanel mainPanel, LoggingService loggingService,
			MilkDairyPersistenceManager milkDairyPersistenceManager) {
		initComponents();
		this.milkDairyManagementJPanel = mainPanel;
		this.loggingService = loggingService;
		this.milkDairyPersistenceManager = milkDairyPersistenceManager;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		titleLbl = new javax.swing.JLabel();
		userPWF = new javax.swing.JPasswordField();
		loginBtn = new javax.swing.JButton("Login");

		userNameLbl = new JLabel("User Name");
		userNameLbl.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
		userNameLbl.setForeground(new java.awt.Color(0, 0, 0));
		userNameTF = new JTextField();
		userErrorL = new JLabel();
		userErrorL.setForeground(Color.red);

		userPWL = new javax.swing.JLabel("User Password");
		userPWL.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
		userPWL.setForeground(new java.awt.Color(0, 0, 0));
		userPWErrorL = new JLabel();
		userPWErrorL.setForeground(Color.red);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setBackground(new java.awt.Color(255, 255, 255));

		titleLbl.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
		titleLbl.setForeground(new java.awt.Color(0, 51, 204));
		titleLbl.setText("MILK DAIRY MANAGEMENT");

		loginBtn.setForeground(Color.WHITE);
		loginBtn.setBackground(Color.black);
		loginBtn.addActionListener(new LoginActionListener());
		loginBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));

		forgetPWBtn = new JButton("FPW");
		forgetPWBtn.setBackground(Color.black);
		forgetPWBtn.setForeground(Color.WHITE);
		forgetPWBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));

		signUpBtn = new JButton("SignUp");
		signUpBtn.setFocusPainted(false);
		signUpBtn.setMargin(new Insets(0, 0, 0, 0));
		signUpBtn.setContentAreaFilled(false);
		signUpBtn.setBorderPainted(false);
		signUpBtn.setOpaque(false);
		signUpBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
		signUpBtn.setForeground(Color.BLUE);
		signUpBtn.setFont(new java.awt.Font("Tahoma", 1, 12));

		loginImage = new JLabel();
		Icon loginBtnIcon = new ImageIcon(
				"D:\\Nagarjuna\\MyPersonal\\login_home_icon.png");
		loginImage.setIcon(loginBtnIcon);

		this.setLayout(null);
		con = this.getContentPane();

		titleLbl.setBounds(100, 30, 300, 40);
		userNameLbl.setBounds(120, titleLbl.getY() + 50, 140, 25);
		userNameTF.setBounds(userNameLbl.getX() + 100 + 20,
				titleLbl.getY() + 50, 140, 25);
		userErrorL.setBounds(userNameTF.getX() + userNameTF.getWidth() + 20,
				titleLbl.getY() + 50, 140, 25);
		userPWL.setBounds(120, userNameLbl.getY() + 50, 140, 20);
		userPWF.setBounds(userPWL.getX() + 100 + 20, userNameLbl.getY() + 50,
				140, 25);
		userPWErrorL.setBounds(userPWF.getX() + userPWF.getWidth() + 20,
				userPWF.getY(), 140, 25);

		loginBtn.setBounds(userPWF.getX() + 30, userPWL.getY() + 40, 70, 30);
		forgetPWBtn.setBounds(loginBtn.getX() + loginBtn.getWidth() + 60,
				userPWL.getY() + 40, 70, 30);
		signUpBtn.setBounds(loginBtn.getX() + loginBtn.getWidth() + 60,
				forgetPWBtn.getY() + 40, 70, 30);
		loginImage.setBounds(10, titleLbl.getY() + 20, 140, 155);

		signUpBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent paramActionEvent) {
				if (!isSignUpDisplay) {
					signUpJP = showSignUpForm();
					signUpJP.setBounds(userPWL.getX() + 100,
							signUpBtn.getY() + 40, 400, 250);
					con.add(signUpJP);
					setSize(600, 600);
					isSignUpDisplay = true;
					revalidate();
					repaint();
				} else {
					User user = validateNdGetUser();
					if (null != user) {
						milkDairyPersistenceManager.save(user);
						con.remove(signUpJP);
						setSize(600, 300);
						isSignUpDisplay = false;
						revalidate();
						repaint();
					}
				}

			}
		});
		forgetPWBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				showForegetDialogBox();

			}
		});
		con.add(titleLbl);
		con.add(userNameLbl);
		con.add(userNameTF);
		con.add(userPWL);
		con.add(userPWF);
		con.add(loginBtn);
		con.add(forgetPWBtn);
		con.add(signUpBtn);
		con.add(userErrorL);
		con.add(userPWErrorL);
		con.add(loginImage);

		this.setResizable(false);
		this.setSize(600, 300);

	}

	class LoginActionListener implements ActionListener {

		@SuppressWarnings("deprecation")
		@Override
		public void actionPerformed(ActionEvent arg0) {
			if ("".equals(userNameTF.getText())) {
				userErrorL.setText("Can't be empty");
			} else if ("".equals(userPWF.getText())) {
				userPWErrorL.setText("Can't be empty");
			} else if (null == milkDairyPersistenceManager.getUser(userNameTF
					.getText().trim(), userPWF.getText().trim())) {
				JOptionPane.showMessageDialog(LoginJFrame.this,
						"User not exist", "MDM Loging",
						JOptionPane.ERROR_MESSAGE);
			} else {
				loginJF.dispose();
				// TODO Auto-generated method stub
				new MilkDairyManagementJFrame(milkDairyManagementJPanel);
			}
		}
	}

	private JLabel signUpUFNameL;
	private JLabel signUpUFNameEL;
	private JTextField signUpUFNameTF;

	private JLabel signUpULNameL;
	private JLabel signUpULNameEL;
	private JTextField signUpULNameTF;

	private JLabel signUpUPhoneL;
	private JLabel signUpUPhoneEL;
	private JTextField signUpUPhoneTF;

	private JLabel signUpUEmailL;
	private JLabel signUpUEmailEL;
	private JTextField signUpUEmailTF;

	private JLabel signUpUAadharL;
	private JLabel signUpUAadharEL;
	private JTextField signUpUAadharTF;

	private JLabel signUpUIDL;
	private JLabel signUpUIDEL;
	private JTextField signUpUIDTF;

	private JLabel signUpUPWL;
	private JLabel signUpUPWEL;
	private JPasswordField signUpUPWPF;

	private JLabel signUpURPWL;
	private JLabel signUpURPWEL;
	private JPasswordField signUpURPWPF;

	private JButton signUpClsBtn;

	private User validateNdGetUser() {
		User user = null;
		String uFName = signUpUFNameTF.getText().trim();
		String uLName = signUpULNameTF.getText().trim();
		String uPhone = signUpUPhoneTF.getText().trim();
		String uEmail = signUpUEmailTF.getText().trim();
		String uAadhar = signUpUAadharTF.getText().trim();
		String uID = signUpUIDTF.getText().trim();
		String uPW = signUpUPWPF.getText().trim();
		String uRPW = signUpURPWPF.getText().trim();
		doSignUpErrorFormEmpty();
		if ("".equals(uFName)) {
			signUpUFNameEL.setText(EMPTY_ERROR_MG);
		} else if ("".equals(uLName)) {
			signUpULNameEL.setText(EMPTY_ERROR_MG);
		} else if (!MDMValidationUtil.isValidPhoneNum(uPhone)) {
			signUpUPhoneEL.setText("Enter valid number");
		} else if (!MDMValidationUtil.isValidEmailAddress(uEmail)) {
			signUpUEmailEL.setText("Enter valid email");
		} else if (!MDMValidationUtil.isValidAadharNum(uAadhar)) {
			signUpUAadharEL.setText("Enter valid number");
		} else if ("".endsWith(uID)) {
			signUpUIDEL.setText(EMPTY_ERROR_MG);
		} else if ("".endsWith(uPW)) {
			signUpUPWEL.setText(EMPTY_ERROR_MG);
		} else if ("".endsWith(uRPW)) {
			signUpURPWEL.setText(EMPTY_ERROR_MG);
		} else if (!uRPW.endsWith(uPW)) {
			signUpUPWEL.setText("Passwords r not matched");
		} else {
			user = new User();
			user.setfName(uFName);
			user.setlName(uLName);
			user.setPhoneNum(uPhone);
			user.setEmail(uEmail);
			user.setAadharNum(uAadhar);
			user.setUserName(uID);
			user.setPassword(uPW);
		}
		return user;
	}

	private void doSignUpErrorFormEmpty() {
		signUpUFNameEL.setText("");
		signUpULNameEL.setText("");
		signUpUPhoneEL.setText("");
		signUpUEmailEL.setText("");
		signUpUAadharEL.setText("");
		signUpUIDEL.setText("");
		signUpUPWEL.setText("");
		signUpURPWEL.setText("");
		signUpUPWEL.setText("");
	}

	private void showForegetDialogBox() {
		if ("".equals(userNameTF.getText())) {
			userErrorL.setText(EMPTY_ERROR_MG);
			return;
		}
		User user = milkDairyPersistenceManager.getUser(userNameTF.getText()
				.toString());
		String name = JOptionPane.showInputDialog(LoginJFrame.this,
				"What's your's favorite pet name?");
		if (null != user&&name!=null) {
			if (!name.equalsIgnoreCase(user.getFevPetName())) {
				foregetJP = showForeGetForm();
				foregetJP.setBounds(5, signUpBtn.getY() + 0, 210, 70);
				con.add(foregetJP);
				setSize(600, 600);
				revalidate();
				repaint();
				isForegetDisplay=true;
			}
		}
	}

	JLabel foregetUPWL;
	//JLabel foregetUPWEL;
	JPasswordField foregetUPWPF;

	JLabel foregetURPWL;
	//JLabel foregetURPWEL;
	JPasswordField foregetURPWPF;

	JButton foregetUpdateBtn;
	JButton foregeClsBtn;

	private JPanel showForeGetForm() {
		JPanel panel = new JPanel();
		GridLayout layout = new GridLayout(3, 2);
		layout.setHgap(5);
		layout.setVgap(5);
		panel.setLayout(layout);
		panel.setVisible(true);
		
		foregetUPWL = new JLabel("Password");
		//foregetUPWEL = new JLabel();
		foregetUPWPF = new JPasswordField();
		//foregetUPWEL.setForeground(Color.RED);

		foregetURPWL = new JLabel("RePassword");
		//foregetURPWEL = new JLabel();
		foregetURPWPF = new JPasswordField();
		//foregetURPWEL.setForeground(Color.RED);

		foregetUpdateBtn = new JButton("Update");
		foregeClsBtn = new JButton("Close");

		panel.add(foregetUPWL);
		panel.add(foregetUPWPF);
		//panel.add(foregetUPWEL);

		panel.add(foregetURPWL);
		panel.add(foregetURPWPF);
		//panel.add(foregetURPWEL);

		panel.add(foregetUpdateBtn);
		foregetUpdateBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				//foregetUPWEL.setText("");
				//foregetURPWEL.setText("");
				String forgetUPassword = foregetUPWPF.getText().trim();
				String forgetRUPassword = foregetURPWPF.getText().trim();
				if ("".equals(forgetUPassword) || "".equals(forgetRUPassword)) {
					JOptionPane.showMessageDialog(
							LoginJFrame.this,
							EMPTY_ERROR_MG,
							"Foreget Password", JOptionPane.ERROR_MESSAGE);
				} else if (!forgetUPassword.equals(forgetRUPassword)) {
					JOptionPane.showMessageDialog(
							LoginJFrame.this,
							"Passwords r not matched",
							"Foreget Password", JOptionPane.ERROR_MESSAGE);
				} else {
					con.remove(foregetJP);
					if(!isSignUpDisplay){
					setSize(600, 300);
					}
					revalidate();
					repaint();
					isForegetDisplay=false;
				}

			}
		});
		panel.add(foregeClsBtn);
		foregeClsBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				con.remove(foregetJP);
				if(!isSignUpDisplay){
					setSize(600, 300);
					}
				revalidate();
				repaint();
				isForegetDisplay=false;
			}
		});
		return panel;
	}

	private JPanel showSignUpForm() {
		JPanel panel = new JPanel();
		// panel.setBackground(Color.darkGray);
		// panel.setSize(200,200);
		GridLayout layout = new GridLayout(9, 3);
		layout.setHgap(10);
		layout.setVgap(10);
		panel.setLayout(layout);
		panel.setVisible(true);

		signUpUFNameL = new JLabel("Fisrt Name");
		signUpUFNameTF = new JTextField();
		signUpUFNameEL = new JLabel();
		signUpUFNameEL.setForeground(Color.RED);

		signUpULNameL = new JLabel("Last Name");
		signUpULNameTF = new JTextField();
		signUpULNameEL = new JLabel();
		signUpULNameEL.setForeground(Color.RED);

		signUpUPhoneL = new JLabel("Phone");
		signUpUPhoneTF = new JTextField();
		signUpUPhoneEL = new JLabel();
		signUpUPhoneEL.setForeground(Color.RED);

		signUpUEmailL = new JLabel("Email");
		signUpUEmailTF = new JTextField();
		signUpUEmailEL = new JLabel();
		signUpUEmailEL.setForeground(Color.RED);

		signUpUAadharL = new JLabel("Aadhar");
		signUpUAadharTF = new JTextField();
		signUpUAadharEL = new JLabel();
		signUpUAadharEL.setForeground(Color.RED);

		signUpUIDL = new JLabel("User ID");
		signUpUIDTF = new JTextField();
		signUpUIDEL = new JLabel();
		signUpUIDEL.setForeground(Color.RED);

		signUpUPWL = new JLabel("Passward");
		signUpUPWPF = new JPasswordField();
		signUpUPWEL = new JLabel();
		signUpUPWEL.setForeground(Color.RED);

		signUpURPWL = new JLabel("RPassward");
		signUpURPWPF = new JPasswordField();
		signUpURPWEL = new JLabel();
		signUpURPWEL.setForeground(Color.RED);

		signUpClsBtn = new JButton("Close singup");
		signUpClsBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				con.remove(signUpJP);
				if(!isForegetDisplay){
				setSize(600, 300);
				}
				isSignUpDisplay = false;
				revalidate();
				repaint();

			}
		});

		panel.add(signUpUFNameL);
		panel.add(signUpUFNameTF);
		panel.add(signUpUFNameEL);

		panel.add(signUpULNameL);
		panel.add(signUpULNameTF);
		panel.add(signUpULNameEL);

		panel.add(signUpUPhoneL);
		panel.add(signUpUPhoneTF);
		panel.add(signUpUPhoneEL);

		panel.add(signUpUEmailL);
		panel.add(signUpUEmailTF);
		panel.add(signUpUEmailEL);

		panel.add(signUpUAadharL);
		panel.add(signUpUAadharTF);
		panel.add(signUpUAadharEL);

		panel.add(signUpUIDL);
		panel.add(signUpUIDTF);
		panel.add(signUpUIDEL);

		panel.add(signUpUPWL);
		panel.add(signUpUPWPF);
		panel.add(signUpUPWEL);

		panel.add(signUpURPWL);
		panel.add(signUpURPWPF);
		panel.add(signUpURPWEL);

		panel.add(signUpClsBtn);

		return panel;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton loginBtn;
	private JLabel userPWL;
	private JPasswordField userPWF;
	private JLabel userNameLbl;
	private JTextField userNameTF;
	private JLabel titleLbl;
	private JButton forgetPWBtn;
	private JLabel userErrorL;
	private JLabel userPWErrorL;
	private JButton signUpBtn;
	private JLabel loginImage;

	// End of variables declaration//GEN-END:variables
}
